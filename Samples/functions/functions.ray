use Sys

addTwo = x:int, y:int => int (x+y)

addThree = x:int, y:int, z:int => int (
    x+y+z
)

addFour = x:int, y:int, z:int, a:int => int (
    x+y+z+a
)

addMany(..args:int) => int (
    when
        count args == 1 => args[0]
        count args == 2 => addTwo args[0], args[1]
        count args == 3 => addThree args[0], args[1], args[2]
        default => -1
)

// Or, more generic, where number is an abstract type from which all numerical primitives inherit..
// with pattern matching

[T number, memo 1000] addTwo{T} = x:T, y:T => T (x + y) // The "[T type]" attribute specifies a constraint on the generic
[T number, memo 1000] addThree{T} = x:T, y:T, z:T => T (x + y + z)
[T number, memo 1000] addFour{T} = x:T, y:T, z:T, a:T => T (x + y + z + a)

[
    T number,
    memo 1000 // memo x means the runtime natively caches the last 1000 results
]
addMany(..args:T) => T (
    match count args
        1 => args[0]
        2 => addTwo args[0], args[1]
        3 => addThree args[0], args[1], args[2]
        default => -1
)

// Declare an attribute
@once = target:fn => fn (
    called:bool = false
    
    _ => (
        if called, noop, (
            called = true
            target ..args
        )
    )
)

[once]
onlyOnce => (
    PrintLn "This will only print once" 
)

onlyOnce
onlyOnce
onlyOnce
